







//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.Entity;

using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Data.SqlClient;
using TuevSued.V1.IT.FE.DataAccess.Interfaces;
using TuevSued.V1.IT.CoreBase.Entities.MasterDataModule.Common;
using TuevSued.V1.IT.MasterDataModule.Lib.Data.Common;
namespace TuevSued.V1.IT.FE.MasterDataModule.Lib.Data
{
    /// <summary>
    /// Database context for FeEntities
    /// </summary>
    public partial class ASProEntities : DbContext, IASProEntities
    {
        /// <summary>
        /// Gets set of entities
        /// </summary>
        /// <typeparam name="TEntity">type of entities</typeparam>
        /// <returns></returns>
        public IQueryable<TEntity> GetSet<TEntity>()
                   where TEntity : class
        {
            return Set<TEntity>();
        }

        /// <summary>
        /// Add entity in context 
        /// </summary>
        /// <typeparam name="TEntity">Type of adding entity</typeparam>
        /// <param name="entity">Adding entity</param>
        public void AddObject<TEntity>(TEntity entity)
               where TEntity : class
        {
            Set<TEntity>().Add(entity);
        }

        /// <summary>
        /// Create entity without adding it to context. Use <see cref="IEntities.AddObject{TEntity}"/> to add object to context
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <returns></returns>
        public TEntity CreateObject<TEntity>() where TEntity : class
        {
            return Set<TEntity>().Create();
        }

        /// <summary>
        /// Update entity in context 
        /// </summary>
        /// <typeparam name="TEntity">Type of updating entity</typeparam>
        /// <param name="entity">Updating entity</param>
        public void UpdateObject<TEntity>(TEntity entity)
            where TEntity : class
        {
            //var entry = Entry(entity);
            //entry.State = EntityState.Modified;
        }

        /// <summary>
        /// Delete entity in context 
        /// </summary>
        /// <typeparam name="TEntity">Type of deleting entity</typeparam>
        /// <param name="entity">Deleting entity</param>
        public void DeleteObject<TEntity>(TEntity entity)
            where TEntity : class
        {
            Set<TEntity>().Remove(entity);
        }


        /// <summary>
        /// This method is called when the model for a derived context has been initialized, but
        ///                 before the model has been locked down and used to initialize the context.  The default
        ///                 implementation of this method does nothing, but it can be overridden in a derived class
        ///                 such that the model can be further configured before it is locked down.
        /// </summary>
        /// <remarks>
        /// Typically, this method is called only once when the first instance of a derived context
        ///                 is created.  The model for that context is then cached and is for all further instances of
        ///                 the context in the app domain.  This caching can be disabled by setting the ModelCaching
        ///                 property on the given ModelBuidler, but note that this can seriously degrade performance.
        ///                 More control over caching is provided through use of the DbModelBuilder and DbContextFactory
        ///                 classes directly.
        /// </remarks>
        /// <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(SysLanguageMapping.Instance);
            modelBuilder.Configurations.Add(InsCoreDataProductLocalizationMapping.Instance);
            modelBuilder.Configurations.Add(InsCoreDataProductMapping.Instance);
            modelBuilder.Configurations.Add(EmpEmployeeMapping.Instance);
            modelBuilder.Configurations.Add(EmpEmployeeSysRoleRspMapping.Instance);
        }

        /// <summary>
        /// 
        /// </summary>
        public DbSet<SysLanguage> SysLanguages { get; set; }


        /// <summary>
        /// 
        /// </summary>
        public DbSet<InsCoreDataProductLocalization> InsCoreDataProductLocalizations { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public DbSet<InsCoreDataProduct> InsCoreDataProducts { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public DbSet<EmpEmployee> EmpEmployees { get; set; }


        /// <summary>
        /// 
        /// </summary>
        public DbSet<EmpEmployeeSysRoleRsp> EmpEmployeeSysRoleRsps { get; set; }
    }
}
