//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
using TuevSued.V1.IT.CoreBase.Entities.MasterDataModule.DriverLicenceMasterData;

namespace TuevSued.V1.IT.FE.MasterDataModule.Lib.Data
{
    /// <summary>
    /// Database mapping for <see cref="ExamClassInclusiveClass"/> to table DRL_EXAM_CLASS_INCLUSIVE_CLASS_RSP
    /// </summary>
    internal sealed class ExamClassInclusiveClassMapping : EntityTypeConfiguration<ExamClassInclusiveClass>
    {
        public static readonly ExamClassInclusiveClassMapping Instance = new ExamClassInclusiveClassMapping();
        /// <summary>
        /// Instance constructor
        /// </summary>
        private ExamClassInclusiveClassMapping()
        {
            // Primary Key
            this.HasKey(t => t.Id);

            // Properties
            this.Property(t => t.Id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            this.Property(t => t.CreateDate)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            // Table & Column Mappings
            this.ToTable("DRL_EXAM_CLASS_INCLUSIVE_CLASS_RSP", "DATA");
            this.Property(t => t.Id).HasColumnName(ExamClassInclusiveClass.Fields.Id);
            this.Property(t => t.ExamClassId).HasColumnName(ExamClassInclusiveClass.Fields.ExamClassId);
            this.Property(t => t.ExamClassIdInclusive).HasColumnName(ExamClassInclusiveClass.Fields.ExamClassIdInclusive);
            this.Property(t => t.CreateDate).HasColumnName(ExamClassInclusiveClass.Fields.CreateDate);
            this.Property(t => t.ChangeDate).HasColumnName(ExamClassInclusiveClass.Fields.ChangeDate);
            this.Property(t => t.OwnerOrgId).HasColumnName(ExamClassInclusiveClass.Fields.OwnerOrgId);
            this.Property(t => t.VisibilityOrgId).HasColumnName(ExamClassInclusiveClass.Fields.VisibilityOrgId);
            this.Property(t => t.CreateEmployeeId).HasColumnName(ExamClassInclusiveClass.Fields.CreateEmployeeId);
            this.Property(t => t.ChangeEmployeeId).HasColumnName(ExamClassInclusiveClass.Fields.ChangeEmployeeId);
            this.Property(t => t.FromDate).HasColumnName(ExamClassInclusiveClass.Fields.FromDate);
            this.Property(t => t.ToDate).HasColumnName(ExamClassInclusiveClass.Fields.ToDate);
            this.Property(t => t.IsConditional).HasColumnName(ExamClassInclusiveClass.Fields.IsConditional);
            this.Property(t => t.DeleteDate).HasColumnName(ExamClassInclusiveClass.Fields.DeleteDate);

            // Relationships
            this.HasRequired(t => t.ExamClass)
                .WithMany(t => t.ExamClassInclusiveClasses)
                .HasForeignKey(d => d.ExamClassId);
            this.HasRequired(t => t.ExamCLASS1)
                .WithMany(t => t.ExamClassInclusiveClassRSP1)
                .HasForeignKey(d => d.ExamClassIdInclusive);


        }
    }
}
