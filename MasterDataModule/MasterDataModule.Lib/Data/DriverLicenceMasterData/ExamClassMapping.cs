//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
using TuevSued.V1.IT.CoreBase.Entities.MasterDataModule.DriverLicenceMasterData;
namespace TuevSued.V1.IT.FE.MasterDataModule.Lib.Data
{
    /// <summary>
    /// Database mapping for <see cref="ExamClass"/> to table DRL_EXAM_CLASS
    /// </summary>
    internal sealed class ExamClassMapping : EntityTypeConfiguration<ExamClass>
    {
        public static readonly ExamClassMapping Instance = new ExamClassMapping();
        /// <summary>
        /// Instance constructor
        /// </summary>
        private ExamClassMapping()
        {
            // Primary Key
            this.HasKey(t => t.Id);

            // Properties
            this.Property(t => t.Id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            this.Property(t => t.Name)
                .IsRequired()
                .IsUnicode()
                .HasMaxLength(10);

            this.Property(t => t.Description)
                .IsRequired()
                .IsUnicode()
                .HasMaxLength(250);

            this.Property(t => t.CreateDate)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            // Table & Column Mappings
            this.ToTable("DRL_EXAM_CLASS", "DATA");
            this.Property(t => t.Id).HasColumnName(ExamClass.Fields.Id);
            this.Property(t => t.Name).HasColumnName(ExamClass.Fields.Name);
            this.Property(t => t.Description).HasColumnName(ExamClass.Fields.Description);
            this.Property(t => t.IsMofa).HasColumnName(ExamClass.Fields.IsMofa);
            this.Property(t => t.CreateDate).HasColumnName(ExamClass.Fields.CreateDate);
            this.Property(t => t.ChangeDate).HasColumnName(ExamClass.Fields.ChangeDate);
            this.Property(t => t.OwnerOrgId).HasColumnName(ExamClass.Fields.OwnerOrgId);
            this.Property(t => t.VisibilityOrgId).HasColumnName(ExamClass.Fields.VisibilityOrgId);
            this.Property(t => t.CreateEmployeeId).HasColumnName(ExamClass.Fields.CreateEmployeeId);
            this.Property(t => t.ChangeEmployeeId).HasColumnName(ExamClass.Fields.ChangeEmployeeId);
            this.Property(t => t.FromDate).HasColumnName(ExamClass.Fields.FromDate);
            this.Property(t => t.ToDate).HasColumnName(ExamClass.Fields.ToDate);
            this.Property(t => t.IsFsClass).HasColumnName(ExamClass.Fields.IsFsClass);
            this.Property(t => t.SortOrder).HasColumnName(ExamClass.Fields.SortOrder);
            this.Property(t => t.DeleteDate).HasColumnName(ExamClass.Fields.DeleteDate);
        }
    }
}
