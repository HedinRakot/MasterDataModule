






define([
	'base/base-object-add-view',
    'l!t!Settings/SysColumnRelationships'
], function (BaseView, TabView) {
    'use strict';

    var view = BaseView.extend({

        tabView: TabView,
        tableName: 'SysColumn',
        actionUrl: '#SysColumns',

		bindings: function () {

            var self = this;
            var result = {
			'#sysTableId': 'sysTableId',
			'#description': 'description',
			'#readOnly': 'readOnly',
			};

            return result;
		},

        render: function () {

            view.__super__.render.apply(this, arguments);

			//TODO foreach model field
			this.disableInput(this, 'sysTableId', 'numeric');
			this.disableInput(this, 'description');
			this.disableInput(this, 'readOnly');

            return this;
        }
    });

    return view;
});
define([
	'base/base-object-add-view',
    'l!t!Settings/RoleRelationships'
], function (BaseView, TabView) {
    'use strict';

    var view = BaseView.extend({

        tabView: TabView,
        tableName: 'Role',
        actionUrl: '#Roles',

		bindings: function () {

            var self = this;
            var result = {
			'#name': 'name',
			'#fromDate': 'fromDate',
			'#toDate': 'toDate',
			};

            return result;
		},

        render: function () {

            view.__super__.render.apply(this, arguments);

			//TODO foreach model field
			this.disableInput(this, 'name');
			this.disableInput(this, 'fromDate', 'date');
			this.disableInput(this, 'toDate', 'date');

            return this;
        }
    });

    return view;
});
define([
	'base/base-object-add-view',
    'l!t!Settings/PermissionRelationships'
], function (BaseView, TabView) {
    'use strict';

    var view = BaseView.extend({

        tabView: TabView,
        tableName: 'Permission',
        actionUrl: '#Permissions',

		bindings: function () {

            var self = this;
            var result = {
			'#systemName': 'systemName',
			'#name': 'name',
			'#fromDate': 'fromDate',
			'#toDate': 'toDate',
			};

            return result;
		},

        render: function () {

            view.__super__.render.apply(this, arguments);

			//TODO foreach model field
			this.disableInput(this, 'systemName');
			this.disableInput(this, 'name');
			this.disableInput(this, 'fromDate', 'date');
			this.disableInput(this, 'toDate', 'date');

            return this;
        }
    });

    return view;
});
define([
	'base/base-object-add-view',
    'l!t!Settings/SysTableRelationships'
], function (BaseView, TabView) {
    'use strict';

    var view = BaseView.extend({

        tabView: TabView,
        tableName: 'SysTable',
        actionUrl: '#SysTables',

		bindings: function () {

            var self = this;
            var result = {
			'#description': 'description',
			'#editMode': 'editMode',
			};

            return result;
		},

        render: function () {

            view.__super__.render.apply(this, arguments);

			//TODO foreach model field
			this.disableInput(this, 'description');
			this.disableInput(this, 'editMode', 'numeric');

            return this;
        }
    });

    return view;
});
define([
	'base/base-object-add-view',
    'l!t!Settings/MasterDataRolePermissionRspRelationships'
], function (BaseView, TabView) {
    'use strict';

    var view = BaseView.extend({

        tabView: TabView,
        tableName: 'MasterDataRolePermissionRsp',
        actionUrl: '#MasterDataRolePermissionRsps',

		bindings: function () {

            var self = this;
            var result = {
			'#masterDataRoleId': { observe: 'masterDataRoleId',
				selectOptions: { labelPath: 'name', valuePath: 'id',
				collection: self.options.role
				,defaultOption: {label: self.resources.pleaseSelect,value: null}},},
			'#masterDataPermissionId': { observe: 'masterDataPermissionId',
				selectOptions: { labelPath: 'name', valuePath: 'id',
				collection: self.options.permission
				,defaultOption: {label: self.resources.pleaseSelect,value: null}},},
			'#fromDate': 'fromDate',
			'#toDate': 'toDate',
			};

            return result;
		},

        render: function () {

            view.__super__.render.apply(this, arguments);

			//TODO foreach model field
			this.disableInput(this, 'masterDataRoleId', 'select');
			this.disableInput(this, 'masterDataPermissionId', 'select');
			this.disableInput(this, 'fromDate', 'date');
			this.disableInput(this, 'toDate', 'date');

            return this;
        }
    });

    return view;
});
define([
	'base/base-object-add-view',
    'l!t!Settings/UserRelationships',
    'l!t!Settings/ChangePassword'
], function (BaseView, TabView, ChangePasswordView) {
    'use strict';

    var view = BaseView.extend({

        tabView: TabView,
        tableName: 'User',
        actionUrl: '#Users',

		bindings: function () {

            var self = this;
            var result = {
			'#masterDataRoleId': { observe: 'masterDataRoleId',
				selectOptions: { labelPath: 'name', valuePath: 'id',
				collection: self.options.role
				,defaultOption: {label: self.resources.pleaseSelect,value: null}},},
			'#login': 'login',
			'#name': 'name',
			'#password': 'password',
			'#password_Name': '',
			'#fromDate': 'fromDate',
			'#toDate': 'toDate',
			};

            return result;
		},

        render: function () {

            view.__super__.render.apply(this, arguments);

			//TODO foreach model field
			this.disableInput(this, 'masterDataRoleId', 'select');
			this.disableInput(this, 'login');
			this.disableInput(this, 'name');
			this.disableInput(this, 'fromDate', 'date');
			this.disableInput(this, 'toDate', 'date');

            return this;
        }
		,events: {
			'click .ChangePassword': function (e) {
                e.preventDefault();

                var self = this,
                    view = new ChangePasswordView();

                self.listenTo(view, 'select', function (item) {

                    self.model.set('password', item.id);
                    self.$el.find('#password').val(item.id);
                    self.$el.find('#password_Name').val(item.get('