<#@ import namespace="System.Text" #>
<#@ import namespace="MetadataLoader.Contracts.Generation" #>
<#@ include file="..\MasterData.GenerationContext.ttinclude"  once="true" #>
<#
    IWebGenerationContext context = generationContext;
    foreach (var model in context.WebModels)
    {
        var entityContent = model.Table.Content;
        context.FileManager.StartNewFile("Add" + entityContent.CodeName + ".html");
		//Model
#>
<% var title = typeof id !== 'undefined' ? '<label data-localized="edit"></label>' : '<label data-localized="add"></label>'; %>

<span class="breadcrumbs"><a href="#<#=masterDataName#>" data-localized="masterData"></a> / 
	<a href="#<#=entityContent.CodeNamePlural#>" data-localized="pageTitle"></a> / <%= title %></span>

<form method="post" class="add-model">
    <div class="inline-block" style="width: 520px;">
<#
        foreach (var property in model.ModelProperties)
        {
            var propContent = property.Column.Content;

			if(!propContent.ShowInAddView)
				continue;

            var type = GetPropertyType(context, property);
#>
		<div class="editor-label">
			<label for="<#=property.Name#>" data-localized="<#=property.Name#>"></label>
<#
			if(property.Type.ShortName != "bool")
			{		
#>
		</div>
		<div class="editor-field">
<#
			}

			var customProperty = "";
			var customPropertyPostfix = "";
			if(!String.IsNullOrEmpty(propContent.CustomView))
			{
				customProperty = String.Format(
					"\n            <button class=\"k-primary k-button {0}\" style=\"width: auto;\" type=\"button\" data-localized=\"{0}\">Auswählen</button>" + 
					"\n            <input type=\"hidden\" id=\"{1}\" name=\"{1}\" />",
					propContent.CustomView, property.Name
				);

				type = "<input type=\"text\" class=\"k-textbox\" style=\"width: 190px\" disabled=\"disabled\"";
				customPropertyPostfix = "_Name";
			}
#>
            <#=type#> id="<#=property.Name + customPropertyPostfix #>" name="<#=property.Name + customPropertyPostfix #>" /><#= customProperty #>
<#
			if(propContent.IsBusinessKey)
			{
#>
			<span class="k-widget k-tooltip k-tooltip-validation k-invalid-msg" data-for="modelName" role="alert"></span>
<#
			}
#>
		</div>   
<#
        }
#>
	</div>
	<div class="inline-block">        
    </div>      

    <br />
    <br />

    <div class="relations-container">
    </div>

    <br />

    <div>
        <button class="k-primary k-button save" data-localized="save"></button>
        <button class="k-button remove" data-localized="delete"></button>
        <button class="k-button cancel" data-localized="cancel"></button>
    </div>
</form>
<#
		context.FileManager.EndBlock();
    }
    context.FileManager.Process();
#>
<#+
    private string GetPropertyType(IWebGenerationContext context, PropertyModelInfo property, bool forValidation = false)
    {
        var shortName = property.Type.ShortName;
        if (string.IsNullOrEmpty(shortName))
        {
            shortName = property.Type.Name.ToLower();
        }

        switch (shortName)
        {
            case "bool":
                return "<input type=\"checkbox\"";
            case "byte":
            case "short":
            case "int":
            case "long":
            case "sbyte":
            case "ushort":
            case "uint":
            case "ulong":
            case "decimal":
            case "float":
            case "double":
				if(!String.IsNullOrEmpty(property.Column.Content.ViewCollection))
					return "<select ";
				else
					return "<input type=\"text\" data-role=\"numerictextbox\"";
            case "datetime":
                return "<input type=\"text\" data-role=\"datepicker\"";
            default:
				if (property.Property.Length.HasValue && property.Property.Length > 50)
                {
					return "<textarea type=\"text\" class=\"k-textbox\" style=\"width: 362px\"";
                }
                else
				{
					return "<input type=\"text\" class=\"k-textbox\" style=\"width: 362px\"";
				}
        }
    }
#>