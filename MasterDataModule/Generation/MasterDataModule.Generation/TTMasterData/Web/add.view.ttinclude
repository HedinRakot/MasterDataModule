<#@ import namespace="System.Text" #>
<#@ import namespace="MetadataLoader.Contracts.Generation" #>
<#@ include file="..\MasterData.GenerationContext.ttinclude"  once="true" #>
<#
    IWebGenerationContext context = generationContext;
    foreach (var model in context.WebModels)
    {
        var entityContent = model.Table.Content;
        context.FileManager.StartNewFile("Add" + entityContent.CodeName + ".js");
		//Model
#>
define([
	'base/base-object-add-view',
    'l!t!<#= context.CurrentRelatedWebPath #>/<#= entityContent.CodeName + "Relationships" #>'
], function (BaseView, TabView) {
    'use strict';

    var view = BaseView.extend({

        tabView: TabView,
        tableName: '<#= entityContent.CodeName #>',
        actionUrl: '#<#= entityContent.CodeNamePlural #>',

		bindings: {
<#
        foreach (var property in model.ModelProperties)
        {
#>
			'#<#=property.Name #>': '<#=property.Name#>',
<#
		}
#>
		},

        render: function () {

            view.__super__.render.apply(this, arguments);

			//TODO foreach model field
<#
		foreach (var property in model.ModelProperties)
        {
            var propContent = property.Column.Content;
            var type = GetPropertyType(context, property);
#>
			this.disableInput(this, '<#= property.Name #>'<#= type #>);
<#
		}
#>

            return this;
        }
    });

    return view;
});
<#
		context.FileManager.EndBlock();
    }
    context.FileManager.Process();
#>
<#+
    private string GetPropertyType(IWebGenerationContext context, PropertyModelInfo property, bool forValidation = false)
    {
        var shortName = property.Type.ShortName;
        if (string.IsNullOrEmpty(shortName))
        {
            shortName = property.Type.Name.ToLower();
        }

        switch (shortName)
        {
            case "bool":
                return "";
            case "byte":
            case "short":
            case "int":
            case "long":
            case "sbyte":
            case "ushort":
            case "uint":
            case "ulong":
            case "decimal":
            case "float":
            case "double":
                return ", 'numeric'";
            case "datetime":
                return ", 'date'";
            default:
				return "";
        }
    }
#>