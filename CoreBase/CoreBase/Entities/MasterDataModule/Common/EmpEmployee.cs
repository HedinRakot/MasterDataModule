//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace TuevSued.V1.IT.CoreBase.Entities.MasterDataModule.Common
{
    /// <summary>
    /// Entity from table EMP_EMPLOYEE. Imported from AsPro: Represents TUEV employee  
    /// </summary>
    public partial class EmpEmployee : IHasId<int>, ICommonSystemFields, ISystemFields, IRemovable, IHasTitle
    {
    
        /// <summary>
        /// Table name
        /// </summary>
        public static readonly string EntityTableName = "EMP_EMPLOYEE";
        #region Fields
        /// <summary>
        /// Columns names
        /// </summary>
        public static class Fields
        {
            /// <summary>
            /// Column name 'ID' for property <see cref="EmpEmployee.Id"/>
            /// </summary>
            public static readonly string Id = "ID";
            /// <summary>
            /// Column name 'USER_ID' for property <see cref="EmpEmployee.UserId"/>
            /// </summary>
            public static readonly string UserId = "USER_ID";
            /// <summary>
            /// Column name 'PERSONAL_NUMBER' for property <see cref="EmpEmployee.PersonalNumber"/>
            /// </summary>
            public static readonly string PersonalNumber = "PERSONAL_NUMBER";
            /// <summary>
            /// Column name 'DOMAIN' for property <see cref="EmpEmployee.Domain"/>
            /// </summary>
            public static readonly string Domain = "DOMAIN";
            /// <summary>
            /// Column name 'USER_NAME' for property <see cref="EmpEmployee.UserName"/>
            /// </summary>
            public static readonly string UserName = "USER_NAME";
            /// <summary>
            /// Column name 'WINDOWS_USER_NAME' for property <see cref="EmpEmployee.WindowsUserName"/>
            /// </summary>
            public static readonly string WindowsUserName = "WINDOWS_USER_NAME";
            /// <summary>
            /// Column name 'ORG_COST_CENTER_ID' for property <see cref="EmpEmployee.OrgCostCenterId"/>
            /// </summary>
            public static readonly string OrgCostCenterId = "ORG_COST_CENTER_ID";
            /// <summary>
            /// Column name 'CONTACT_EMPLOYEE_ID' for property <see cref="EmpEmployee.ContactEmployeeId"/>
            /// </summary>
            public static readonly string ContactEmployeeId = "CONTACT_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'IS_SSO_ALLOWED' for property <see cref="EmpEmployee.IsSsoAllowed"/>
            /// </summary>
            public static readonly string IsSsoAllowed = "IS_SSO_ALLOWED";
            /// <summary>
            /// Column name 'IS_PASSWORD_LOGIN_ALLOWED' for property <see cref="EmpEmployee.IsPasswordLoginAllowed"/>
            /// </summary>
            public static readonly string IsPasswordLoginAllowed = "IS_PASSWORD_LOGIN_ALLOWED";
            /// <summary>
            /// Column name 'IS_EMERGENCY_LOGIN_ALLOWED' for property <see cref="EmpEmployee.IsEmergencyLoginAllowed"/>
            /// </summary>
            public static readonly string IsEmergencyLoginAllowed = "IS_EMERGENCY_LOGIN_ALLOWED";
            /// <summary>
            /// Column name 'EMP_CORE_ADDRESS_ID' for property <see cref="EmpEmployee.EmpCoreAddressId"/>
            /// </summary>
            public static readonly string EmpCoreAddressId = "EMP_CORE_ADDRESS_ID";
            /// <summary>
            /// Column name 'NAME' for property <see cref="EmpEmployee.Name"/>
            /// </summary>
            public static readonly string Name = "NAME";
            /// <summary>
            /// Column name 'MIDDLE_NAME' for property <see cref="EmpEmployee.MiddleName"/>
            /// </summary>
            public static readonly string MiddleName = "MIDDLE_NAME";
            /// <summary>
            /// Column name 'LAST_NAME' for property <see cref="EmpEmployee.LastName"/>
            /// </summary>
            public static readonly string LastName = "LAST_NAME";
            /// <summary>
            /// Column name 'COUNTRY_FLAG' for property <see cref="EmpEmployee.CountryFlag"/>
            /// </summary>
            public static readonly string CountryFlag = "COUNTRY_FLAG";
            /// <summary>
            /// Column name 'COMMENT' for property <see cref="EmpEmployee.Comment"/>
            /// </summary>
            public static readonly string Comment = "COMMENT";
            /// <summary>
            /// Column name 'SEX_TYPE' for property <see cref="EmpEmployee.SexType"/>
            /// </summary>
            public static readonly string SexType = "SEX_TYPE";
            /// <summary>
            /// Column name 'TITLE' for property <see cref="EmpEmployee.Title"/>
            /// </summary>
            public static readonly string Title = "TITLE";
            /// <summary>
            /// Column name 'BIRTHDATE' for property <see cref="EmpEmployee.Birthdate"/>
            /// </summary>
            public static readonly string Birthdate = "BIRTHDATE";
            /// <summary>
            /// Column name 'TOP_EMPLOYEE_ID' for property <see cref="EmpEmployee.TopEmployeeId"/>
            /// </summary>
            public static readonly string TopEmployeeId = "TOP_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'CREATE_DATE' for property <see cref="EmpEmployee.CreateDate"/>
            /// </summary>
            public static readonly string CreateDate = "CREATE_DATE";
            /// <summary>
            /// Column name 'CHANGE_DATE' for property <see cref="EmpEmployee.ChangeDate"/>
            /// </summary>
            public static readonly string ChangeDate = "CHANGE_DATE";
            /// <summary>
            /// Column name 'DELETE_DATE' for property <see cref="EmpEmployee.DeleteDate"/>
            /// </summary>
            public static readonly string DeleteDate = "DELETE_DATE";
            /// <summary>
            /// Column name 'OWNER_ORG_ID' for property <see cref="EmpEmployee.OwnerOrgId"/>
            /// </summary>
            public static readonly string OwnerOrgId = "OWNER_ORG_ID";
            /// <summary>
            /// Column name 'VISIBILITY_ORG_ID' for property <see cref="EmpEmployee.VisibilityOrgId"/>
            /// </summary>
            public static readonly string VisibilityOrgId = "VISIBILITY_ORG_ID";
            /// <summary>
            /// Column name 'CREATE_EMPLOYEE_ID' for property <see cref="EmpEmployee.CreateEmployeeId"/>
            /// </summary>
            public static readonly string CreateEmployeeId = "CREATE_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'CHANGE_EMPLOYEE_ID' for property <see cref="EmpEmployee.ChangeEmployeeId"/>
            /// </summary>
            public static readonly string ChangeEmployeeId = "CHANGE_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'SOURCE' for property <see cref="EmpEmployee.Source"/>
            /// </summary>
            public static readonly string Source = "SOURCE";
            /// <summary>
            /// Column name 'FROM_DATE' for property <see cref="EmpEmployee.FromDate"/>
            /// </summary>
            public static readonly string FromDate = "FROM_DATE";
            /// <summary>
            /// Column name 'TO_DATE' for property <see cref="EmpEmployee.ToDate"/>
            /// </summary>
            public static readonly string ToDate = "TO_DATE";
      
        }
        #endregion
        /// <summary>
        /// Constructor
        /// </summary>
        public EmpEmployee()
        {

        }
    
        /// <summary>
        /// PK. Original table: EMP_EMPLOYEE, Column: ID  
        /// </summary>
        public int Id {  get;  set; }
        /// <summary>
        /// User identifier.. Original table: EMP_EMPLOYEE, Column: USER_ID  
        /// </summary>
        //public int? UserId {  get;  set; }
        /// <summary>
        /// Personal number.. Original table: EMP_EMPLOYEE, Column: PERSONAL_NUMBER  
        /// </summary>
        public string PersonalNumber {  get;  set; }
        /// <summary>
        /// Domain. Original table: EMP_EMPLOYEE, Column: DOMAIN  
        /// </summary>
        public string Domain {  get;  set; }
        /// <summary>
        /// System user name. Original table: EMP_EMPLOYEE, Column: USER_NAME  
        /// </summary>
        public string UserName {  get;  set; }
        /// <summary>
        /// User name for windows authentification. Original table: EMP_EMPLOYEE, Column: WINDOWS_USER_NAME  
        /// </summary>
        public string WindowsUserName {  get;  set; }
        /// <summary>
        /// Org const cented connected to the employee.. Original table: EMP_EMPLOYEE, Column: ORG_COST_CENTER_ID  
        /// </summary>
        //public int? OrgCostCenterId {  get;  set; }
        /// <summary>
        /// Ansprechpartner fuer Mitarbeiter (Kostenstelle). Original table: EMP_EMPLOYEE, Column: CONTACT_EMPLOYEE_ID  
        /// </summary>
        //public int? ContactEmployeeId {  get;  set; }
        /// <summary>
        /// 1 - Single sign on login is allowed for employee. Original table: EMP_EMPLOYEE, Column: IS_SSO_ALLOWED  
        /// </summary>
        public bool? IsSsoAllowed {  get;  set; }
        /// <summary>
        /// 1 - Login with password is allowed for employee. Original table: EMP_EMPLOYEE, Column: IS_PASSWORD_LOGIN_ALLOWED  
        /// </summary>
        public bool? IsPasswordLoginAllowed {  get;  set; }
        /// <summary>
        /// 1 - Emergency login is allowed for employee. Original table: EMP_EMPLOYEE, Column: IS_EMERGENCY_LOGIN_ALLOWED  
        /// </summary>
        public bool? IsEmergencyLoginAllowed {  get;  set; }
        /// <summary>
        /// Eployee''''s address.. Original table: EMP_EMPLOYEE, Column: EMP_CORE_ADDRESS_ID  
        /// </summary>
        public int? EmpCoreAddressId {  get;  set; }
        /// <summary>
        /// First name. Original table: EMP_EMPLOYEE, Column: NAME  
        /// </summary>
        public string Name {  get;  set; }
        /// <summary>
        /// Middle name. Original table: EMP_EMPLOYEE, Column: MIDDLE_NAME  
        /// </summary>
        public string MiddleName {  get;  set; }
        /// <summary>
        /// Last name. Original table: EMP_EMPLOYEE, Column: LAST_NAME  
        /// </summary>
        public string LastName {  get;  set; }
        /// <summary>
        /// Country flag. Original table: EMP_EMPLOYEE, Column: COUNTRY_FLAG  
        /// </summary>
        //public int? CountryFlag {  get;  set; }
        /// <summary>
        /// Comment. Original table: EMP_EMPLOYEE, Column: COMMENT  
        /// </summary>
        public string Comment {  get;  set; }
        /// <summary>
        /// Sex. Original table: EMP_EMPLOYEE, Column: SEX_TYPE  
        /// </summary>
        public int? SexType {  get;  set; }
        /// <summary>
        /// Title. Original table: EMP_EMPLOYEE, Column: TITLE  
        /// </summary>
        public string Title {  get;  set; }
        /// <summary>
        /// Birth date. Original table: EMP_EMPLOYEE, Column: BIRTHDATE  
        /// </summary>
        public System.DateTime Birthdate {  get;  set; }
        /// <summary>
        /// Reference to pricipal.. Original table: EMP_EMPLOYEE, Column: TOP_EMPLOYEE_ID  
        /// </summary>
        //public int? TopEmployeeId {  get;  set; }
        /// <summary>
        /// Create date. Original table: EMP_EMPLOYEE, Column: CREATE_DATE  
        /// </summary>
        public System.DateTime CreateDate {  get;  set; }
        /// <summary>
        /// Change date. Original table: EMP_EMPLOYEE, Column: CHANGE_DATE  
        /// </summary>
        public System.DateTime ChangeDate {  get;  set; }
        /// <summary>
        /// Delete date. Original table: EMP_EMPLOYEE, Column: DELETE_DATE  
        /// </summary>
        public System.DateTime? DeleteDate {  get;  set; }
        /// <summary>
        /// Owner of record concerning organizational hierarchy. Original table: EMP_EMPLOYEE, Column: OWNER_ORG_ID  
        /// </summary>
        public int? OwnerOrgId {  get;  set; }
        /// <summary>
        /// Visibility of record concerning organizational hierarchy. Original table: EMP_EMPLOYEE, Column: VISIBILITY_ORG_ID  
        /// </summary>
        public int? VisibilityOrgId {  get;  set; }
        /// <summary>
        /// Employee who created record. Original table: EMP_EMPLOYEE, Column: CREATE_EMPLOYEE_ID  
        /// </summary>
        public int? CreateEmployeeId {  get;  set; }
        /// <summary>
        /// Employee who changed record. Original table: EMP_EMPLOYEE, Column: CHANGE_EMPLOYEE_ID  
        /// </summary>
        public int? ChangeEmployeeId {  get;  set; }
        /// <summary>
        /// Short name of source data. Original table: EMP_EMPLOYEE, Column: SOURCE  
        /// </summary>
        public string Source {  get;  set; }
        /// <summary>
        /// Validity start date. Original table: EMP_EMPLOYEE, Column: FROM_DATE  
        /// </summary>
        public System.DateTime FromDate {  get;  set; }
        /// <summary>
        /// Validity end date. Original table: EMP_EMPLOYEE, Column: TO_DATE  
        /// </summary>
        public System.DateTime ToDate {  get;  set; }    

        /// <summary>
        /// From date entity valid 
        /// </summary>
    	DateTime? ISystemFields.FromDate
    	{
    	    get { 
    		      return FromDate; 
    			}
    		set { 
    		      if(value.HasValue){FromDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// To date entity valid 
        /// </summary>
    	DateTime? ISystemFields.ToDate
    	{
    	    get { 
    		      return ToDate; 
    			}
    		set { 
    		      if(value.HasValue){ToDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}


        /// <summary>
        /// 
        /// </summary>
        public string EntityTitle
        {
            get
            {
               return String.Format("{0}{1} {2}", LastName, 
                   !String.IsNullOrEmpty(MiddleName) ? MiddleName + " " : String.Empty,
                   Name);
            }
        }



        /// <summary>
        /// Entity create date 
        /// </summary>
        DateTime? ICommonSystemFields.CreateDate
        {
            get { return CreateDate; }
            set
            {
                if (value.HasValue)
                {
                    CreateDate = value.Value;
                }
                else
                {
                    throw new ArgumentNullException("value");
                }
            }
        }

        /// <summary>
        /// Last changed date 
        /// </summary>
        DateTime? ICommonSystemFields.ChangeDate
        {
            get
            {
                return ChangeDate;
            }
            set
            {
                if (value.HasValue) { ChangeDate = value.Value; } else { throw new ArgumentNullException("value"); }
            }
        }   

        /// <summary>
        /// Shallow copy of object. Exclude navigation properties and PK properties
        /// </summary>
        public EmpEmployee ShallowCopy()
    	{
    	   return new EmpEmployee {
                                           //UserId = this.UserId,
                                           PersonalNumber = this.PersonalNumber,
                                           Domain = this.Domain,
                                           UserName = this.UserName,
                                           WindowsUserName = this.WindowsUserName,
                                           //OrgCostCenterId = this.OrgCostCenterId,
                                           //ContactEmployeeId = this.ContactEmployeeId,
                                           IsSsoAllowed = this.IsSsoAllowed,
                                           IsPasswordLoginAllowed = this.IsPasswordLoginAllowed,
                                           IsEmergencyLoginAllowed = this.IsEmergencyLoginAllowed,
                                           EmpCoreAddressId = this.EmpCoreAddressId,
                                           Name = this.Name,
                                           MiddleName = this.MiddleName,
                                           LastName = this.LastName,
                                           //CountryFlag = this.CountryFlag,
                                           Comment = this.Comment,
                                           SexType = this.SexType,
                                           Title = this.Title,
                                           Birthdate = this.Birthdate,
                                           //TopEmployeeId = this.TopEmployeeId,
                                           DeleteDate = this.DeleteDate,
                                           Source = this.Source,
    	                              };
    	}
    }
}
