//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace TuevSued.V1.IT.CoreBase.Entities.MasterDataModule.DriverLicenceMasterData
{
    /// <summary>
    /// Entity from table DRL_EXAM_CLASS_INCLUSIVE_CLASS_RSP. EN: 5.2.12.8 Assignment Types for Classes (Inclusiv Class)  DE: 5.2.12.8 Fahrerlaubnis - Zuordnungsarten fuer Klassen  
    /// </summary>
    public partial  class ExamClassInclusiveClass: IHasId<int>, ICommonSystemFields, ISystemFields, IRemovable
    {
    
        /// <summary>
        /// Table name
        /// </summary>
        public static readonly string EntityTableName = "DRL_EXAM_CLASS_INCLUSIVE_CLASS_RSP";
        #region Fields
        /// <summary>
        /// Columns names
        /// </summary>
        public static partial class Fields
        {
            /// <summary>
            /// Column name 'ID' for property <see cref="ExamClassInclusiveClass.Id"/>
            /// </summary>
            public static readonly string Id = "ID";
            /// <summary>
            /// Column name 'DRL_EXAM_CLASS_ID' for property <see cref="ExamClassInclusiveClass.ExamClassId"/>
            /// </summary>
            public static readonly string ExamClassId = "DRL_EXAM_CLASS_ID";
            /// <summary>
            /// Column name 'DRL_EXAM_CLASS_ID_INCLUSIVE' for property <see cref="ExamClassInclusiveClass.ExamClassIdInclusive"/>
            /// </summary>
            public static readonly string ExamClassIdInclusive = "DRL_EXAM_CLASS_ID_INCLUSIVE";
            /// <summary>
            /// Column name 'CREATE_DATE' for property <see cref="ExamClassInclusiveClass.CreateDate"/>
            /// </summary>
            public static readonly string CreateDate = "CREATE_DATE";
            /// <summary>
            /// Column name 'CHANGE_DATE' for property <see cref="ExamClassInclusiveClass.ChangeDate"/>
            /// </summary>
            public static readonly string ChangeDate = "CHANGE_DATE";
            /// <summary>
            /// Column name 'OWNER_ORG_ID' for property <see cref="ExamClassInclusiveClass.OwnerOrgId"/>
            /// </summary>
            public static readonly string OwnerOrgId = "OWNER_ORG_ID";
            /// <summary>
            /// Column name 'VISIBILITY_ORG_ID' for property <see cref="ExamClassInclusiveClass.VisibilityOrgId"/>
            /// </summary>
            public static readonly string VisibilityOrgId = "VISIBILITY_ORG_ID";
            /// <summary>
            /// Column name 'CREATE_EMPLOYEE_ID' for property <see cref="ExamClassInclusiveClass.CreateEmployeeId"/>
            /// </summary>
            public static readonly string CreateEmployeeId = "CREATE_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'CHANGE_EMPLOYEE_ID' for property <see cref="ExamClassInclusiveClass.ChangeEmployeeId"/>
            /// </summary>
            public static readonly string ChangeEmployeeId = "CHANGE_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'FROM_DATE' for property <see cref="ExamClassInclusiveClass.FromDate"/>
            /// </summary>
            public static readonly string FromDate = "FROM_DATE";
            /// <summary>
            /// Column name 'TO_DATE' for property <see cref="ExamClassInclusiveClass.ToDate"/>
            /// </summary>
            public static readonly string ToDate = "TO_DATE";
            /// <summary>
            /// Column name 'IS_CONDITIONAL' for property <see cref="ExamClassInclusiveClass.IsConditional"/>
            /// </summary>
            public static readonly string IsConditional = "IS_CONDITIONAL";
      
        }
        #endregion
        /// <summary>
        /// Constructor
        /// </summary>
        public ExamClassInclusiveClass()
        {
            this.IsConditional = false;
        }
    
        /// <summary>
        /// EN: PK  DE: Primaerschluessel  
        /// </summary>
        public int Id {  get;  set; }
        /// <summary>
        /// EN: Class  DE: FE - Klasse  
        /// </summary>
        public int ExamClassId {  get;  set; }
        /// <summary>
        /// EN: Required Class DE: Voraussetzungsklasse  
        /// </summary>
        public int ExamClassIdInclusive {  get;  set; }
        /// <summary>
        /// ANLAGEDATUM (INSERT-DATUM)  
        /// </summary>
        public System.DateTime CreateDate {  get;  set; }
        /// <summary>
        /// AENDERUNGSDATUM (UPDATE-DATUM)  
        /// </summary>
        public System.DateTime ChangeDate {  get;  set; }
        /// <summary>
        /// OWNER (SCHLUESSEL EINER ORGANISATIONSEINHEIT, WELCHE FUER DIE PFLEGE EINES DATENSATZES  
        /// </summary>
        public int? OwnerOrgId {  get;  set; }
        /// <summary>
        /// SICHTBARKEIT (SCHLUESSEL EINER ORGANISATIONSEINHEIT, AB WELCHER IM HIERACHIEBAUM ABWAERTS EIN DATENSATZ SICHTBAR IST)  
        /// </summary>
        public int? VisibilityOrgId {  get;  set; }
        /// <summary>
        /// ANLEGER (PERSONALNUMMER DES MITARBEITERS, DER DEN DATENSATZ ANGELEGT HAT)  
        /// </summary>
        public int? CreateEmployeeId {  get;  set; }
        /// <summary>
        /// AENDERER (PERSONALNUMMER DES MITARBEITERS, DER DEN DATENSATZ ALS LETZTES GEAENDERT HAT, BEI NEUANLAGE IST DIESER WERT GLEICH DEM ANLEGER)  
        /// </summary>
        public int? ChangeEmployeeId {  get;  set; }
        /// <summary>
        /// VON-DATUM DER GUELTIGKEIT  
        /// </summary>
        public System.DateTime FromDate {  get;  set; }
        /// <summary>
        /// ENDE-DATUM DER GUELTIGKEIT  
        /// </summary>
        public System.DateTime ToDate {  get;  set; }
        /// <summary>
        /// EN: Indication whether additional condition exists DE: Zeigt an, ob zusaetzliche Vorauszetzungen vorhanden sind  
        /// </summary>
        public bool IsConditional {  get;  set; }
        /// <summary>
        /// Navigation property to object DRL_EXAM_CLASS. Comment: EN: 5.2.12.5 Class  DE: 5.2.12.5 Fahrerlaubnis - Klassen  
        /// </summary>
        public virtual ExamClass ExamClass {  get;  set; }
        /// <summary>
        /// Is entity property <see cref="ExamClass"/> null or not
        /// </summary>
    	public bool HasExamClass
    	{
    	    get { return !ReferenceEquals(ExamClass, null);}
    	}    
        /// <summary>
        /// Navigation property to object DRL_EXAM_CLASS. Comment: EN: 5.2.12.5 Class  DE: 5.2.12.5 Fahrerlaubnis - Klassen  
        /// </summary>
        public virtual ExamClass ExamCLASS1 {  get;  set; }
        /// <summary>
        /// Is entity property <see cref="ExamCLASS1"/> null or not
        /// </summary>
    	public bool HasExamCLASS1
    	{
    	    get { return !ReferenceEquals(ExamCLASS1, null);}
    	}    
        /// <summary>
        /// Entity create date 
        /// </summary>
    	DateTime? ICommonSystemFields.CreateDate
    	{
    	    get { 
    		      return CreateDate; 
    			}
    		set { 
    		      if(value.HasValue){CreateDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// Last changed date 
        /// </summary>
    	DateTime? ICommonSystemFields.ChangeDate
    	{
    	    get { 
    		      return ChangeDate; 
    			}
    		set { 
    		      if(value.HasValue){ChangeDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// From date entity valid 
        /// </summary>
    	DateTime? ISystemFields.FromDate
    	{
    	    get { 
    		      return FromDate; 
    			}
    		set { 
    		      if(value.HasValue){FromDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// To date entity valid 
        /// </summary>
    	DateTime? ISystemFields.ToDate
    	{
    	    get { 
    		      return ToDate; 
    			}
    		set { 
    		      if(value.HasValue){ToDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// Shallow copy of object. Exclude navigation properties and PK properties
        /// </summary>
        public ExamClassInclusiveClass ShallowCopy()
    	{
    	   return new ExamClassInclusiveClass {
                                           ExamClassId = this.ExamClassId,
                                           ExamClassIdInclusive = this.ExamClassIdInclusive,
                                           IsConditional = this.IsConditional,
    	                              };
    	}
    }
}
