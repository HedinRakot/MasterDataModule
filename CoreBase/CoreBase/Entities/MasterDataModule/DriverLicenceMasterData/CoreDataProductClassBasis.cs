//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace TuevSued.V1.IT.CoreBase.Entities.MasterDataModule.DriverLicenceMasterData
{
    /// <summary>
    /// Entity from table DRL_CORE_DATA_PRODUCT_CLASS_BASIS_RSP. EN: 5.3.5.20 Reference table: Assignment of the Legal_Basis/Class to the Product  DE: 5.3.5.20 Produkt - FE-Rechtsgrund/Klasse zuordnen  
    /// </summary>
    public partial class CoreDataProductClassBasis : IHasId<int>, ICommonSystemFields, ISystemFields, IRemovable
    {
    
        /// <summary>
        /// Table name
        /// </summary>
        public static readonly string EntityTableName = "DRL_CORE_DATA_PRODUCT_CLASS_BASIS_RSP";
        #region Fields
        /// <summary>
        /// Columns names
        /// </summary>
        public static class Fields
        {
            /// <summary>
            /// Column name 'ID' for property <see cref="CoreDataProductClassBasis.Id"/>
            /// </summary>
            public static readonly string Id = "ID";
            /// <summary>
            /// Column name 'DRL_EXAM_CLASS_ID' for property <see cref="CoreDataProductClassBasis.ExamClassId"/>
            /// </summary>
            public static readonly string ExamClassId = "DRL_EXAM_CLASS_ID";
            /// <summary>
            /// Column name 'DRL_CORE_DATA_PRODUCT_ID' for property <see cref="CoreDataProductClassBasis.CoreDataProductId"/>
            /// </summary>
            public static readonly string CoreDataProductId = "DRL_CORE_DATA_PRODUCT_ID";
            /// <summary>
            /// Column name 'DRL_LEGAL_BASIS_ID' for property <see cref="CoreDataProductClassBasis.LegalBasisId"/>
            /// </summary>
            public static readonly string LegalBasisId = "DRL_LEGAL_BASIS_ID";
            /// <summary>
            /// Column name 'CREATE_DATE' for property <see cref="CoreDataProductClassBasis.CreateDate"/>
            /// </summary>
            public static readonly string CreateDate = "CREATE_DATE";
            /// <summary>
            /// Column name 'CHANGE_DATE' for property <see cref="CoreDataProductClassBasis.ChangeDate"/>
            /// </summary>
            public static readonly string ChangeDate = "CHANGE_DATE";
            /// <summary>
            /// Column name 'OWNER_ORG_ID' for property <see cref="CoreDataProductClassBasis.OwnerOrgId"/>
            /// </summary>
            public static readonly string OwnerOrgId = "OWNER_ORG_ID";
            /// <summary>
            /// Column name 'VISIBILITY_ORG_ID' for property <see cref="CoreDataProductClassBasis.VisibilityOrgId"/>
            /// </summary>
            public static readonly string VisibilityOrgId = "VISIBILITY_ORG_ID";
            /// <summary>
            /// Column name 'CREATE_EMPLOYEE_ID' for property <see cref="CoreDataProductClassBasis.CreateEmployeeId"/>
            /// </summary>
            public static readonly string CreateEmployeeId = "CREATE_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'CHANGE_EMPLOYEE_ID' for property <see cref="CoreDataProductClassBasis.ChangeEmployeeId"/>
            /// </summary>
            public static readonly string ChangeEmployeeId = "CHANGE_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'FROM_DATE' for property <see cref="CoreDataProductClassBasis.FromDate"/>
            /// </summary>
            public static readonly string FromDate = "FROM_DATE";
            /// <summary>
            /// Column name 'TO_DATE' for property <see cref="CoreDataProductClassBasis.ToDate"/>
            /// </summary>
            public static readonly string ToDate = "TO_DATE";
            /// <summary>
            /// Column name 'SORT_ORDER' for property <see cref="CoreDataProductClassBasis.SortOrder"/>
            /// </summary>
            public static readonly string SortOrder = "SORT_ORDER";
            /// <summary>
            /// Column name 'TO_DATE' for property <see cref="ExamClass.DeleteDate"/>
            /// </summary>
            public static readonly string DeleteDate = "DELETE_DATE";
      
        }
        #endregion
        /// <summary>
        /// Constructor
        /// </summary>
        public CoreDataProductClassBasis()
        {
            this.SortOrder = 0;
        }
    
        /// <summary>
        /// EN: PK  DE: Primaerschluessel  
        /// </summary>
        public int Id {  get;  set; }
        /// <summary>
        /// EN: Class  DE: FE-Klasse  
        /// </summary>
        public int ExamClassId {  get;  set; }
        /// <summary>
        /// EN: Product  DE: FE-Produkt  
        /// </summary>
        public int CoreDataProductId {  get;  set; }
        /// <summary>
        /// EN: Legal Bases  DE: Rechtsgrund  
        /// </summary>
        public int LegalBasisId {  get;  set; }
        /// <summary>
        /// ANLAGEDATUM (INSERT-DATUM)  
        /// </summary>
        public System.DateTime CreateDate {  get;  set; }
        /// <summary>
        /// AENDERUNGSDATUM (UPDATE-DATUM)  
        /// </summary>
        public System.DateTime ChangeDate {  get;  set; }
        /// <summary>
        /// OWNER (SCHLUESSEL EINER ORGANISATIONSEINHEIT, WELCHE FUER DIE PFLEGE EINES DATENSATZES  
        /// </summary>
        public int? OwnerOrgId {  get;  set; }
        /// <summary>
        /// SICHTBARKEIT (SCHLUESSEL EINER ORGANISATIONSEINHEIT, AB WELCHER IM HIERACHIEBAUM ABWAERTS EIN DATENSATZ SICHTBAR IST)  
        /// </summary>
        public int? VisibilityOrgId {  get;  set; }
        /// <summary>
        /// ANLEGER (PERSONALNUMMER DES MITARBEITERS, DER DEN DATENSATZ ANGELEGT HAT)  
        /// </summary>
        public int? CreateEmployeeId {  get;  set; }
        /// <summary>
        /// AENDERER (PERSONALNUMMER DES MITARBEITERS, DER DEN DATENSATZ ALS LETZTES GEAENDERT HAT, BEI NEUANLAGE IST DIESER WERT GLEICH DEM ANLEGER)  
        /// </summary>
        public int? ChangeEmployeeId {  get;  set; }
        /// <summary>
        /// VON-DATUM DER GUELTIGKEIT  
        /// </summary>
        public System.DateTime FromDate {  get;  set; }
        /// <summary>
        /// ENDE-DATUM DER GUELTIGKEIT  
        /// </summary>
        public System.DateTime ToDate {  get;  set; }
        /// <summary>
        /// EN: Sort Order for GUI DE: Reihenfolge fuer die Anzeige im GUI  
        /// </summary>
        public int SortOrder {  get;  set; }
        /// <summary>
        /// Navigation property to object DRL_CORE_DATA_PRODUCT. Comment: EN: 5.3.5.15 Product - assign Additional Details  DE: 5.3.5.15 Produkt - FE-Zusatzdaten zuordnen  
        /// </summary>
        public virtual CoreDataProduct CoreDataProduct {  get;  set; }
        /// <summary>
        /// Is entity property <see cref="CoreDataProduct"/> null or not
        /// </summary>
    	public bool HasCoreDataProduct
    	{
    	    get { return !ReferenceEquals(CoreDataProduct, null);}
    	}    
        /// <summary>
        /// Navigation property to object DRL_EXAM_CLASS. Comment: EN: 5.2.12.5 Class  DE: 5.2.12.5 Fahrerlaubnis - Klassen  
        /// </summary>
        public virtual ExamClass ExamClass {  get;  set; }
        /// <summary>
        /// Is entity property <see cref="ExamClass"/> null or not
        /// </summary>
    	public bool HasExamClass
    	{
    	    get { return !ReferenceEquals(ExamClass, null);}
    	}    
        /// <summary>
        /// Navigation property to object DRL_LEGAL_BASIS. Comment: EN: 5.2.12.7 Legal Basis  DE: 5.2.12.7 Fahrerlaubnis - Rechtsgruende  
        /// </summary>
        public virtual LegalBasis LegalBasis {  get;  set; }
        /// <summary>
        /// Is entity property <see cref="LegalBasis"/> null or not
        /// </summary>
    	public bool HasLegalBasis
    	{
    	    get { return !ReferenceEquals(LegalBasis, null);}
    	}    
        /// <summary>
        /// Entity create date 
        /// </summary>
    	DateTime? ICommonSystemFields.CreateDate
    	{
    	    get { 
    		      return CreateDate; 
    			}
    		set { 
    		      if(value.HasValue){CreateDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// Last changed date 
        /// </summary>
    	DateTime? ICommonSystemFields.ChangeDate
    	{
    	    get { 
    		      return ChangeDate; 
    			}
    		set { 
    		      if(value.HasValue){ChangeDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// From date entity valid 
        /// </summary>
    	DateTime? ISystemFields.FromDate
    	{
    	    get { 
    		      return FromDate; 
    			}
    		set { 
    		      if(value.HasValue){FromDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// To date entity valid 
        /// </summary>
    	DateTime? ISystemFields.ToDate
    	{
    	    get { 
    		      return ToDate; 
    			}
    		set { 
    		      if(value.HasValue){ToDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}


        /// <summary>
        /// DELETE DATUM
        /// </summary>
        public System.DateTime? DeleteDate { get; set; }
        
        /// <summary>
        /// Shallow copy of object. Exclude navigation properties and PK properties
        /// </summary>
        public CoreDataProductClassBasis ShallowCopy()
    	{
    	   return new CoreDataProductClassBasis {
                                           ExamClassId = this.ExamClassId,
                                           CoreDataProductId = this.CoreDataProductId,
                                           LegalBasisId = this.LegalBasisId,
                                           SortOrder = this.SortOrder,
    	                              };
    	}
    }
}
