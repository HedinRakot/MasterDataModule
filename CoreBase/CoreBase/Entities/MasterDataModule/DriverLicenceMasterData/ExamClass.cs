//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace TuevSued.V1.IT.CoreBase.Entities.MasterDataModule.DriverLicenceMasterData
{
    /// <summary>
    /// Entity from table DRL_EXAM_CLASS. EN: 5.2.12.5 Class  DE: 5.2.12.5 Fahrerlaubnis - Klassen  
    /// </summary>
    public partial class ExamClass : IHasId<int>, ICommonSystemFields, ISystemFields, IRemovable
    {
    
        /// <summary>
        /// Table name
        /// </summary>
        public static readonly string EntityTableName = "DRL_EXAM_CLASS";
        #region Fields
        /// <summary>
        /// Columns names
        /// </summary>
        public static partial class Fields
        {
            /// <summary>
            /// Column name 'ID' for property <see cref="ExamClass.Id"/>
            /// </summary>
            public static readonly string Id = "ID";
            /// <summary>
            /// Column name 'NAME' for property <see cref="ExamClass.Name"/>
            /// </summary>
            public static readonly string Name = "NAME";
            /// <summary>
            /// Column name 'DESCRIPTION' for property <see cref="ExamClass.Description"/>
            /// </summary>
            public static readonly string Description = "DESCRIPTION";
            /// <summary>
            /// Column name 'IS_MOFA' for property <see cref="ExamClass.IsMofa"/>
            /// </summary>
            public static readonly string IsMofa = "IS_MOFA";
            /// <summary>
            /// Column name 'CREATE_DATE' for property <see cref="ExamClass.CreateDate"/>
            /// </summary>
            public static readonly string CreateDate = "CREATE_DATE";
            /// <summary>
            /// Column name 'CHANGE_DATE' for property <see cref="ExamClass.ChangeDate"/>
            /// </summary>
            public static readonly string ChangeDate = "CHANGE_DATE";
            /// <summary>
            /// Column name 'OWNER_ORG_ID' for property <see cref="ExamClass.OwnerOrgId"/>
            /// </summary>
            public static readonly string OwnerOrgId = "OWNER_ORG_ID";
            /// <summary>
            /// Column name 'VISIBILITY_ORG_ID' for property <see cref="ExamClass.VisibilityOrgId"/>
            /// </summary>
            public static readonly string VisibilityOrgId = "VISIBILITY_ORG_ID";
            /// <summary>
            /// Column name 'CREATE_EMPLOYEE_ID' for property <see cref="ExamClass.CreateEmployeeId"/>
            /// </summary>
            public static readonly string CreateEmployeeId = "CREATE_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'CHANGE_EMPLOYEE_ID' for property <see cref="ExamClass.ChangeEmployeeId"/>
            /// </summary>
            public static readonly string ChangeEmployeeId = "CHANGE_EMPLOYEE_ID";
            /// <summary>
            /// Column name 'FROM_DATE' for property <see cref="ExamClass.FromDate"/>
            /// </summary>
            public static readonly string FromDate = "FROM_DATE";
            /// <summary>
            /// Column name 'TO_DATE' for property <see cref="ExamClass.ToDate"/>
            /// </summary>
            public static readonly string ToDate = "TO_DATE";
            /// <summary>
            /// Column name 'IS_FS_CLASS' for property <see cref="ExamClass.IsFsClass"/>
            /// </summary>
            public static readonly string IsFsClass = "IS_FS_CLASS";
            /// <summary>
            /// Column name 'SORT_ORDER' for property <see cref="ExamClass.SortOrder"/>
            /// </summary>
            public static readonly string SortOrder = "SORT_ORDER";
      
        }
        #endregion
        /// <summary>
        /// Constructor
        /// </summary>
        public ExamClass()
        {
            this.IsMofa = false;
            this.IsFsClass = false;
            this.SortOrder = 0;
            this.ExamClassInclusiveClasses = new HashSet<ExamClassInclusiveClass>();
            this.ExamClassInclusiveClassRSP1 = new HashSet<ExamClassInclusiveClass>();
            this.ExamClassRequiredClasses = new HashSet<ExamClassRequiredClass>();
            this.ExamClassRequiredClassRSP1 = new HashSet<ExamClassRequiredClass>();
            this.CoreDataProductClassBasis = new HashSet<CoreDataProductClassBasis>();
        }
    
        /// <summary>
        /// EN: PK  DE: Primaerschluessel  
        /// </summary>
        public int Id {  get;  set; }
        /// <summary>
        /// EN: Class (PK in old system) DE: FE-Klasse (Primaerschluessel im Altsystem)  
        /// </summary>
        public string Name {  get;  set; }
        /// <summary>
        /// EN: Description  DE: Beschreibung  
        /// </summary>
        public string Description {  get;  set; }
        /// <summary>
        /// EN: Indication that it is MOFA DE: Angabe, dass es sich um MOFA Pr√ºfbescheinigung handelt  
        /// </summary>
        public bool IsMofa {  get;  set; }
        /// <summary>
        /// ANLAGEDATUM (INSERT-DATUM)  
        /// </summary>
        public System.DateTime CreateDate {  get;  set; }
        /// <summary>
        /// AENDERUNGSDATUM (UPDATE-DATUM)  
        /// </summary>
        public System.DateTime ChangeDate {  get;  set; }
        /// <summary>
        /// OWNER (SCHLUESSEL EINER ORGANISATIONSEINHEIT, WELCHE FUER DIE PFLEGE EINES DATENSATZES  
        /// </summary>
        public int? OwnerOrgId {  get;  set; }
        /// <summary>
        /// SICHTBARKEIT (SCHLUESSEL EINER ORGANISATIONSEINHEIT, AB WELCHER IM HIERACHIEBAUM ABWAERTS EIN DATENSATZ SICHTBAR IST)  
        /// </summary>
        public int? VisibilityOrgId {  get;  set; }
        /// <summary>
        /// ANLEGER (PERSONALNUMMER DES MITARBEITERS, DER DEN DATENSATZ ANGELEGT HAT)  
        /// </summary>
        public int? CreateEmployeeId {  get;  set; }
        /// <summary>
        /// AENDERER (PERSONALNUMMER DES MITARBEITERS, DER DEN DATENSATZ ALS LETZTES GEAENDERT HAT, BEI NEUANLAGE IST DIESER WERT GLEICH DEM ANLEGER)  
        /// </summary>
        public int? ChangeEmployeeId {  get;  set; }
        /// <summary>
        /// VON-DATUM DER GUELTIGKEIT  
        /// </summary>
        public System.DateTime FromDate {  get;  set; }
        /// <summary>
        /// ENDE-DATUM DER GUELTIGKEIT  
        /// </summary>
        public System.DateTime ToDate {  get;  set; }
        /// <summary>
        /// EN: Indication whether class should be showed as driver licence class DE: Zeigt an, ob die Klasse als Fuehrerschein-Klasse anzuzeigen ist  
        /// </summary>
        public bool IsFsClass {  get;  set; }
        /// <summary>
        /// EN: Sort order for GUI DE: Auflistungsreihenfolge  
        /// </summary>
        public int SortOrder {  get;  set; }
        
        /// <summary>
        /// Navigation property to object DRL_EXAM_CLASS_INCLUSIVE_CLASS_RSP. Comment: EN: 5.2.12.8 Assignment Types for Classes (Inclusiv Class)  DE: 5.2.12.8 Fahrerlaubnis - Zuordnungsarten fuer Klassen  
        /// </summary>
        public virtual ICollection<ExamClassInclusiveClass> ExamClassInclusiveClasses {  get;  set; }
    
    	/// <summary>
    	/// Filtered collection of <see cref="ExamClassInclusiveClasses"/>
    	/// </summary>
    	public IEnumerable<ExamClassInclusiveClass> ExamClassInclusiveClassesFiltered 
    	{
    		get
    		{
    			return ExamClassInclusiveClasses.Where(SystemFilter<ExamClassInclusiveClass>.Func);
    		}
    	}
    			
        /// <summary>
        /// Navigation property to object DRL_EXAM_CLASS_INCLUSIVE_CLASS_RSP. Comment: EN: 5.2.12.8 Assignment Types for Classes (Inclusiv Class)  DE: 5.2.12.8 Fahrerlaubnis - Zuordnungsarten fuer Klassen  
        /// </summary>
        public virtual ICollection<ExamClassInclusiveClass> ExamClassInclusiveClassRSP1 {  get;  set; }
    
    	/// <summary>
    	/// Filtered collection of <see cref="ExamClassInclusiveClassRSP1"/>
    	/// </summary>
    	public IEnumerable<ExamClassInclusiveClass> ExamClassInclusiveClassRSP1Filtered 
    	{
    		get
    		{
    			return ExamClassInclusiveClassRSP1.Where(SystemFilter<ExamClassInclusiveClass>.Func);
    		}
    	}
    			
        
        /// <summary>
        /// Navigation property to object DRL_EXAM_CLASS_REQUIRED_CLASS_RSP. Comment: EN: 5.2.12.8 Assignment Types for Classes (Required Class)  DE: 5.2.12.8 Fahrerlaubnis - Zuordnungsarten fuer Klassen  
        /// </summary>
        public virtual ICollection<ExamClassRequiredClass> ExamClassRequiredClasses {  get;  set; }
    
    	/// <summary>
    	/// Filtered collection of <see cref="ExamClassRequiredClasses"/>
    	/// </summary>
    	public IEnumerable<ExamClassRequiredClass> ExamClassRequiredClassesFiltered 
    	{
    		get
    		{
    			return ExamClassRequiredClasses.Where(SystemFilter<ExamClassRequiredClass>.Func);
    		}
    	}
    			
        /// <summary>
        /// Navigation property to object DRL_EXAM_CLASS_REQUIRED_CLASS_RSP. Comment: EN: 5.2.12.8 Assignment Types for Classes (Required Class)  DE: 5.2.12.8 Fahrerlaubnis - Zuordnungsarten fuer Klassen  
        /// </summary>
        public virtual ICollection<ExamClassRequiredClass> ExamClassRequiredClassRSP1 {  get;  set; }
    
    	/// <summary>
    	/// Filtered collection of <see cref="ExamClassRequiredClassRSP1"/>
    	/// </summary>
    	public IEnumerable<ExamClassRequiredClass> ExamClassRequiredClassRSP1Filtered 
    	{
    		get
    		{
    			return ExamClassRequiredClassRSP1.Where(SystemFilter<ExamClassRequiredClass>.Func);
    		}
    	}

        /// <summary>
        /// Navigation property to object DRL_CORE_DATA_PRODUCT_CLASS_BASIS_RSP. Comment: EN: 5.3.5.20 Reference table: Assignment of the Legal_Basis/Class to the Product  DE: 5.3.5.20 Produkt - FE-Rechtsgrund/Klasse zuordnen  
        /// </summary>
        public virtual ICollection<CoreDataProductClassBasis> CoreDataProductClassBasis { get; set; }
    			
        
        /// <summary>
        /// Entity create date 
        /// </summary>
    	DateTime? ICommonSystemFields.CreateDate
    	{
    	    get { 
    		      return CreateDate; 
    			}
    		set { 
    		      if(value.HasValue){CreateDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// Last changed date 
        /// </summary>
    	DateTime? ICommonSystemFields.ChangeDate
    	{
    	    get { 
    		      return ChangeDate; 
    			}
    		set { 
    		      if(value.HasValue){ChangeDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// From date entity valid 
        /// </summary>
    	DateTime? ISystemFields.FromDate
    	{
    	    get { 
    		      return FromDate; 
    			}
    		set { 
    		      if(value.HasValue){FromDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// To date entity valid 
        /// </summary>
    	DateTime? ISystemFields.ToDate
    	{
    	    get { 
    		      return ToDate; 
    			}
    		set { 
    		      if(value.HasValue){ToDate = value.Value;} else{ throw new ArgumentNullException("value"); } 
    			}
    	}    
        /// <summary>
        /// Shallow copy of object. Exclude navigation properties and PK properties
        /// </summary>
        public ExamClass ShallowCopy()
    	{
    	   return new ExamClass {
                                           Name = this.Name,
                                           Description = this.Description,
                                           IsMofa = this.IsMofa,
                                           IsFsClass = this.IsFsClass,
                                           SortOrder = this.SortOrder,
    	                              };
    	}
    }
}
